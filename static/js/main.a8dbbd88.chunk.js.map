{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","_jsx","className","concat","mode","children","_jsxs","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","_Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","defaultProps","aboutText","Alert","height","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","document","body","Date","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","getElementById"],"mappings":"oMAIe,SAASA,EAAOC,GAC7B,OACEC,cAAA,OACEC,UAAS,kCAAAC,OAAoCH,EAAMI,KAAI,QAAAD,OAAOH,EAAMI,MAAOC,SAE3EC,eAAA,OAAKJ,UAAU,kBAAiBG,SAAA,CAC9BJ,cAAA,KAAGC,UAAU,eAAeK,KAAK,IAAGF,SACjCL,EAAMQ,QAETP,cAAA,UACEC,UAAU,iBACVO,KAAK,SACL,iBAAe,WACf,iBAAe,0BACf,gBAAc,yBACd,gBAAc,QACd,aAAW,oBAAmBJ,SAE9BJ,cAAA,QAAMC,UAAU,0BAElBI,eAAA,OAAKJ,UAAU,2BAA2BQ,GAAG,yBAAwBL,SAAA,CACnEC,eAAA,MAAIJ,UAAU,kCAAiCG,SAAA,CAC7CJ,cAAA,MAAIC,UAAU,WAAUG,SACtBJ,cAAA,KAAGC,UAAU,WAAW,eAAa,OAAOK,KAAK,IAAGF,SAAC,WAIvDJ,cAAA,MAAIC,UAAU,gBAMhBI,eAAA,OACEJ,UAAS,+BAAAC,OACQ,UAAfH,EAAMI,KAAmB,OAAS,SACjCC,SAAA,CAEHJ,cAAA,SACEC,UAAU,mBACVS,QAASX,EAAMY,WACfH,KAAK,WACLC,GAAG,2BAELT,cAAA,SACEC,UAAU,mBACVW,QAAQ,yBAAwBR,SACjC,8BAQb,CCzDe,SAASS,EAASd,GAC/B,IAmCAe,EAAwBC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GAGpB,OACEX,eAAAe,WAAA,CAAAhB,SAAA,CACEC,eAAA,OACEJ,UAAU,YACVoB,MAAO,CAAEC,MAAsB,SAAfvB,EAAMI,KAAkB,QAAU,WAAYC,SAAA,CAE9DJ,cAAA,MAAIC,UAAU,OAAMG,SAAEL,EAAMwB,UAC5BvB,cAAA,OAAKC,UAAU,OAAMG,SACnBJ,cAAA,YACEC,UAAU,eACVuB,MAAON,EACPO,SA/Ba,SAACC,GACtBP,EAAQO,EAAMC,OAAOH,MACvB,EA8BUH,MAAO,CACLO,gBAAgC,SAAf7B,EAAMI,KAAkB,UAAY,QACrDmB,MAAsB,SAAfvB,EAAMI,KAAkB,QAAU,WAE3CM,GAAG,QACHoB,KAAK,QAGT7B,cAAA,UACE8B,SAA0B,IAAhBZ,EAAKa,OACf9B,UAAU,4BACVS,QA7Dc,WACpB,IAAIsB,EAAUd,EAAKe,cACnBd,EAAQa,GACRjC,EAAMmC,UAAU,0BAA2B,UAC7C,EAyD+B9B,SACxB,yBAGDJ,cAAA,UACE8B,SAA0B,IAAhBZ,EAAKa,OACf9B,UAAU,4BACVS,QA9Dc,WACpB,IAAIsB,EAAUd,EAAKiB,cACnBhB,EAAQa,GACRjC,EAAMmC,UAAU,0BAA2B,UAC7C,EA0D+B9B,SACxB,yBAGDJ,cAAA,UACE8B,SAA0B,IAAhBZ,EAAKa,OACf9B,UAAU,4BACVS,QA/DiB,WAEvBS,EADc,IAEdpB,EAAMmC,UAAU,gBAAiB,UACnC,EA2DkC9B,SAC3B,eAGDJ,cAAA,UACE8B,SAA0B,IAAhBZ,EAAKa,OACf9B,UAAU,4BACVS,QA3DW,WACjB0B,UAAUC,UAAUC,UAAUpB,GAC9BnB,EAAMmC,UAAU,uBAAwB,UAC1C,EAwD4B9B,SACrB,cAGDJ,cAAA,UACE8B,SAA0B,IAAhBZ,EAAKa,OACf9B,UAAU,4BACVS,QA5DkB,WACxB,IAAIsB,EAAUd,EAAKqB,MAAM,QACzBpB,EAAQa,EAAQQ,KAAK,MACrBzC,EAAMmC,UAAU,wBAAyB,UAC3C,EAwDmC9B,SAC5B,2BAIHC,eAAA,OACEJ,UAAU,iBACVoB,MAAO,CAAEC,MAAsB,SAAfvB,EAAMI,KAAkB,QAAU,WAAYC,SAAA,CAE9DJ,cAAA,MAAAI,SAAI,sBACJC,eAAA,KAAAD,SAAA,CAEIc,EAAKqB,MAAM,OAAOE,QAAO,SAACC,GACxB,OAA0B,IAAnBA,EAAQX,MACjB,IAAGA,OACH,IAAI,aACKb,EAAKa,OAAO,iBAEzB1B,eAAA,KAAAD,SAAA,CACG,KACCc,EAAKqB,MAAM,OAAOE,QAAO,SAACC,GACxB,OAA0B,IAAnBA,EAAQX,MACjB,IAAGA,OAAQ,IAAI,kBAGnB/B,cAAA,MAAAI,SAAI,YACJJ,cAAA,KAAAI,SAAIc,EAAKa,OAAS,EAAIb,EAAO,6BAIrC,CDxDApB,EAAO6C,aAAe,CACpBpC,MAAO,iBACPqC,UAAW,SE/CEC,MAnBf,SAAe9C,GAKb,OACEC,cAAA,OAAKqB,MAAO,CAAEyB,OAAQ,QAAS1C,SAC5BL,EAAMgD,OACL1C,eAAA,OACEJ,UAAS,eAAAC,OAAiBH,EAAMgD,MAAMvC,KAAI,gCAC1CwC,KAAK,QAAO5C,SAAA,CAEZJ,cAAA,UAAAI,SAXW,SAAC6C,GAClB,IAAMC,EAAQD,EAAKd,cACnB,OAAOe,EAAMC,OAAO,GAAGlB,cAAgBiB,EAAME,MAAM,EACrD,CAQiBC,CAAWtD,EAAMgD,MAAMvC,QAAe,KAAGT,EAAMgD,MAAMO,QAKxE,ECkCeC,MA7Cf,WACE,IAAAzC,EAAwBC,mBAAS,SAAQC,EAAAC,YAAAH,EAAA,GAAlCX,EAAIa,EAAA,GAAEwC,EAAOxC,EAAA,GACpByC,EAA0B1C,mBAAS,MAAK2C,EAAAzC,YAAAwC,EAAA,GAAjCV,EAAKW,EAAA,GAAEC,EAAQD,EAAA,GAEhBxB,EAAY,SAAC0B,EAASpD,GAC1BmD,EAAS,CACPL,IAAKM,EACLpD,KAAMA,IAERqD,YAAW,WACTF,EAAS,KACX,GAAG,KACL,EAaA,OACEtD,eAAAe,WAAA,CAAAhB,SAAA,CACIJ,cAACF,EAAM,CACLS,MAAM,YACNJ,KAAMA,EACNQ,WAhBW,WACJ,UAATR,GACFqD,EAAQ,QACRM,SAASC,KAAK1C,MAAMO,gBAAkB,UACtCM,EAAU,6BAA8B,aAExCsB,EAAQ,SACRM,SAASC,KAAK1C,MAAMO,gBAAkB,QACtCM,EAAU,8BAA+B,WAE7C,GAOa,IAAI8B,MAEXhE,cAAC6C,EAAK,CAACE,MAAOA,IACd/C,cAAA,OAAKC,UAAU,iBAAgBG,SACzBJ,cAACa,EAAQ,CACPqB,UAAWA,EACXX,QAAQ,uEACRpB,KAAMA,QAKtB,ECvCe8D,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,SAAAC,GAAkD,IAA/CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,EACV,GAEJ,ECJAS,IAASC,OACP5E,cAAC6E,IAAMC,WAAU,CAAA1E,SACfJ,cAACuD,EAAG,MAENO,SAASiB,eAAe,SAM1Bd,G","file":"static/js/main.a8dbbd88.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n//import { Link } from \"react-router-dom\";\n\nexport default function Navbar(props) {\n  return (\n    <nav\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\n    >\n      <div className=\"container-fluid\">\n        <a className=\"navbar-brand\" href=\"#\">\n          {props.title}\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" aria-current=\"page\" href=\"#\">\n                Home\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              {/* {<a className=\"nav-link\" to=\"/about\">\n                {props.aboutText}\n              </a>} */}\n            </li>\n          </ul>\n          <div\n            className={`form-check form-switch text-${\n              props.mode === \"light\" ? \"dark\" : \"light\"\n            }`}\n          >\n            <input\n              className=\"form-check-input\"\n              onClick={props.toggleMode}\n              type=\"checkbox\"\n              id=\"flexSwitchCheckDefault\"\n            />\n            <label\n              className=\"form-check-label\"\n              htmlFor=\"flexSwitchCheckDefault\"\n            >\n              Enable DarkMode\n            </label>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nNavbar.propTypes = {\n  title: PropTypes.string.isRequired,\n  aboutText: PropTypes.string.isRequired,\n};\n\nNavbar.defaultProps = {\n  title: \"Set title here\",\n  aboutText: \"About\",\n};\n\n","import React, { useState } from \"react\";\n\nexport default function TextForm(props) {\n  const handleUpClick = () => {\n    let newText = text.toUpperCase();\n    setText(newText);\n    props.showAlert(\"Converted to uppercase!\", \"success\");\n  };\n\n  const handleLoClick = () => {\n    let newText = text.toLowerCase();\n    setText(newText);\n    props.showAlert(\"Converted to lowercase!\", \"success\");\n  };\n\n  const handleClearClick = () => {\n    let newText = \"\";\n    setText(newText);\n    props.showAlert(\"Text Cleared!\", \"success\");\n  };\n\n  const handleOnChange = (event) => {\n    setText(event.target.value);\n  };\n\n  // Credits: A\n  const handleCopy = () => {\n    navigator.clipboard.writeText(text);\n    props.showAlert(\"Copied to Clipboard!\", \"success\");\n  };\n\n  // Credits: Coding Wala\n  const handleExtraSpaces = () => {\n    let newText = text.split(/[ ]+/);\n    setText(newText.join(\" \"));\n    props.showAlert(\"Extra spaces removed!\", \"success\");\n  };\n\n  const [text, setText] = useState(\"\");\n  // text = \"new text\"; // Wrong way to change the state\n  // setText(\"new text\"); // Correct way to change the state\n  return (\n    <>\n      <div\n        className=\"container\"\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\n      >\n        <h1 className=\"mb-4\">{props.heading}</h1>\n        <div className=\"mb-3\">\n          <textarea\n            className=\"form-control\"\n            value={text}\n            onChange={handleOnChange}\n            style={{\n              backgroundColor: props.mode === \"dark\" ? \"#13466e\" : \"white\",\n              color: props.mode === \"dark\" ? \"white\" : \"#042743\",\n            }}\n            id=\"myBox\"\n            rows=\"8\"\n          ></textarea>\n        </div>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-primary mx-1 my-1\"\n          onClick={handleUpClick}\n        >\n          Convert to Uppercase\n        </button>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-primary mx-1 my-1\"\n          onClick={handleLoClick}\n        >\n          Convert to Lowercase\n        </button>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-primary mx-1 my-1\"\n          onClick={handleClearClick}\n        >\n          Clear Text\n        </button>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-primary mx-1 my-1\"\n          onClick={handleCopy}\n        >\n          Copy Text\n        </button>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-primary mx-1 my-1\"\n          onClick={handleExtraSpaces}\n        >\n          Remove Extra Spaces\n        </button>\n      </div>\n      <div\n        className=\"container my-3\"\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\n      >\n        <h2>Your text summary</h2>\n        <p>\n          {\n            text.split(/\\s+/).filter((element) => {\n              return element.length !== 0;\n            }).length\n          }{\" \"}\n          words and {text.length} characters\n        </p>\n        <p>\n          {0.008 *\n            text.split(/\\s+/).filter((element) => {\n              return element.length !== 0;\n            }).length}{\" \"}\n          Minutes read\n        </p>\n        <h2>Preview</h2>\n        <p>{text.length > 0 ? text : \"Nothing to preview!\"}</p>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\n\nfunction Alert(props) {\n  const capitalize = (word) => {\n    const lower = word.toLowerCase();\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\n  };\n  return (\n    <div style={{ height: \"50px\" }}>\n      {props.alert && (\n        <div\n          className={`alert alert-${props.alert.type} alert-dismissible fade show`}\n          role=\"alert\"\n        >\n          <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Alert;\n","import \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n//import About from \"./components/About\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n//import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); // Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  };\n  return (\n    <>\n        <Navbar\n          title=\"TextUtils\"\n          mode={mode}\n          toggleMode={toggleMode}\n          key={new Date()}\n        />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n              <TextForm\n                showAlert={showAlert}\n                heading=\"Try TextUtils - word counter, character counter, remove extra spaces\"\n                mode={mode}\n              />\n        </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}